// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventDiscription")
                        .IsRequired();

                    b.Property<int>("EventDuration");

                    b.Property<string>("EventLocation")
                        .IsRequired();

                    b.Property<string>("EventName")
                        .IsRequired();

                    b.Property<int?>("EventOpenPleaces");

                    b.Property<string>("EventStart")
                        .IsRequired();

                    b.Property<int>("EventType");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = 1, EventDiscription = "Race to the top of the mountain Vodno, with price pool for first, second and third place.", EventDuration = 12, EventLocation = "Kumanovo", EventName = "Ture De Kumanovo", EventOpenPleaces = 54, EventStart = "24.12.2019", EventType = 4, UserId = 1 },
                        new { Id = 2, EventDiscription = "Race to the top of the mountain Vodno, with price pool for first, second and third place.", EventDuration = 12, EventLocation = "Skopje", EventName = "Skopje De Kumanovo", EventOpenPleaces = 54, EventStart = "12.12.2019", EventType = 5, UserId = 2 }
                    );
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("DateOfBirth")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int?>("EventId");

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EventId");

                    b.ToTable("Users");

                    b.HasData(
                        new { ID = 1, Address = "Mirce Acev18", City = "Kumanovo", Country = "Macedonia", DateOfBirth = "12.12.1990", Email = "filip.Donevski1@gmail.com", Firstname = "Filip", Lastname = "Donevski", Password = "Done123", Username = "Done" },
                        new { ID = 2, Address = "Mirce Acev18", City = "Kumanovo", Country = "Macedonia", DateOfBirth = "12.12.1990", Email = "Niakolin.Donevskia@gmail.com", Firstname = "Nikolina", Lastname = "Donevska", Password = "Nane123", Username = "Nane" }
                    );
                });

            modelBuilder.Entity("DomainModels.UserEvents", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedEventId");

                    b.Property<int?>("EventId");

                    b.Property<int>("GoingEventId");

                    b.HasKey("UserId", "ID");

                    b.HasAlternateKey("ID");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new { UserId = 1, ID = 1, CreatedEventId = 1, GoingEventId = 0 },
                        new { UserId = 1, ID = 2, CreatedEventId = 0, GoingEventId = 2 }
                    );
                });

            modelBuilder.Entity("DomainModels.Event", b =>
                {
                    b.HasOne("DomainModels.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.HasOne("DomainModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("DomainModels.UserEvents", b =>
                {
                    b.HasOne("DomainModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
